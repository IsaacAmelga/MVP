#This implementation calculates the option's delta, gamma, theta, and vega using the Py_vollib library's analytical Black-Scholes model. It also calculates the option's implied volatility using the same model. The results are printed to the console

import numpy as np
from py_vollib.black_scholes import implied_volatility
from py_vollib.black_scholes.greeks.analytical import delta, gamma, theta, vega

def calculate_option_greeks_advanced(option_type, s, k, t, r, price, sigma):
    # Calculate delta, gamma, theta, and vega
    d1 = (np.log(s / k) + (r + 0.5 * sigma ** 2) * t) / (sigma * np.sqrt(t))
    d2 = d1 - sigma * np.sqrt(t)
    if option_type == 'call':
        delta_value = delta('c', s, k, t, r, sigma)
        gamma_value = gamma('c', s, k, t, r, sigma)
        theta_value = theta('c', s, k, t, r, sigma, d1=d1, d2=d2, time=t)
        vega_value = vega('c', s, k, t, r, sigma, d1=d1, time=t)
    else:
        delta_value = delta('p', s, k, t, r, sigma)
        gamma_value = gamma('p', s, k, t, r, sigma)
        theta_value = theta('p', s, k, t, r, sigma, d1=d1, d2=d2, time=t)
        vega_value = vega('p', s, k, t, r, sigma, d1=d1, time=t)

    # Calculate implied volatility
    iv = implied_volatility(price, s, k, t, r, option_type)

    # Print results
    print("Option Type: ", option_type)
    print("Underlying Price (S): ", s)
    print("Strike Price (K): ", k)
    print("Time to Expiration (T): ", t)
    print("Risk-Free Interest Rate (r): ", r)
    print("Option Price: ", price)
    print("Implied Volatility: ", iv)
    print("Delta: ", delta_value)
    print("Gamma: ", gamma_value)
    print("Theta: ", theta_value)
    print("Vega: ", vega_value)

# Calculate the theoretical value:
from py_vollib.black_scholes import black_scholes as bs
def calculate_theoretical_price(option_type, s, k, t, r, sigma):
    # Calculate the theoretical option price using the Black-Scholes model
    if option_type == 'call':
        price = bs('c', s, k, t, r, sigma)
    else:
        price = bs('p', s, k, t, r, sigma)
    return price

def compare_prices(option_type, s, k, t, r, sigma, market_price):
    # Calculate the theoretical option price using the Black-Scholes model
    theoretical_price = calculate_theoretical_price(option_type, s, k, t, r, sigma)

    # Compare the theoretical price to the market price and print the results
    if theoretical_price < market_price:
        print(f"Theoretical {option_type} option price is {theoretical_price:.2f}, which is lower than the market price of {market_price:.2f}. This could indicate an overpriced option that could be a good target for selling.")
    elif theoretical_price > market_price:
        print(f"Theoretical {option_type} option price is {theoretical_price:.2f}, which is higher than the market price of {market_price:.2f}. This could indicate an underpriced option that could be a good target for buying.")
    else:
        print(f"Theoretical {option_type} option price is {theoretical_price:.2f}, which is equal to the market price of {market_price:.2f}. There may not be a clear trading opportunity based on price alone.")
# Import yahoo
import yfinance as yf
def get_stock_data(stock_symbol):
    # Get the current stock price and other relevant data from Yahoo Finance
    stock_info = yf.Ticker(stock_symbol).info
    current_price = stock_info['regularMarketPrice']
    implied_volatility = stock_info['impliedVolatility']
    return current_price, implied_volatility
def get_option_data(stock_symbol, option_type, expiration_date, strike_price):
    # Get the option chain from Yahoo Finance
    option_chain = yf.Ticker(stock_symbol).option_chain(expiration_date)
    # Get the specific option value based on the desired type and strike price
    if option_type == 'call':
        option_data = option_chain.calls[option_chain.calls['strike'] == strike_price]
    elif option_type == 'put':
        option_data = option_chain.puts[option_chain.puts['strike'] == strike_price]
    else:
        raise ValueError("Invalid option type specified. Please enter 'call' or 'put'.")
    # Extract the relevant data from the option data frame
    current_price = option_data['lastPrice'].values[0]
    bid_price = option_data['bid'].values[0]
    ask_price = option_data['ask'].values[0]
    implied_volatility = option_data['impliedVolatility'].values[0]
    return current_price, bid_price, ask_price, implied_volatility



from scipy.stats import norm
import math

def calculate_option_price(spot_price, strike_price, time_to_maturity, risk_free_rate, volatility, option_type):
    d1 = (math.log(spot_price/strike_price) + (risk_free_rate + volatility*volatility/2)*time_to_maturity)/(volatility*math.sqrt(time_to_maturity))
    d2 = d1 - volatility*math.sqrt(time_to_maturity)
    if option_type == 'call':
        option_price = spot_price*norm.cdf(d1) - strike_price*math.exp(-risk_free_rate*time_to_maturity)*norm.cdf(d2)
    else:
        option_price = strike_price*math.exp(-risk_free_rate*time_to_maturity)*norm.cdf(-d2) - spot_price*norm.cdf(-d1)
    return option_price



    d1 = (math.log(spot_price/strike_price) + (risk_free_rate + volatility*volatility/2)*time_to_maturity)/(volatility*math.sqrt(time_to_maturity))
    d2 = d1 - volatility*math.sqrt(time_to_maturity)
    delta = norm.cdf(d1) if option_type == 'call' else norm.cdf(d1) - 1
    gamma = norm.pdf(d1)/(spot_price*volatility*math.sqrt(time_to_maturity))
    theta = (-spot_price*norm.pdf(d1)*volatility)/(2*math.sqrt(time_to_maturity)) - risk_free_rate*strike_price*math.exp(-risk_free_rate*time_to_maturity)*norm.cdf(-d2) if option_type == 'call' else (-spot_price*norm.pdf(d1)*volatility)/(2*math.sqrt(time_to_maturity)) + risk_free_rate*strike_price*math.exp(-risk_free_rate*time_to_maturity)*norm.cdf(d2)
    vega = spot_price*norm.pdf(d1)*math.sqrt(time_to_maturity)
    return delta, gamma, theta, vega


def identify_overpriced_options(spot_price, time_to_maturity, risk_free_rate, volatility, option_type, options_list):
    overpriced_options = []
    for option in options_list:
        option_price = calculate_option_price(spot_price, option['strike_price'], time_to_maturity, risk_free_rate, volatility, option_type)
        if option_price > option['market_price']:
            overpriced_options.append(option)
    return overpriced_options

def identify_high_gamma_options(spot_price, time_to_maturity, risk_free_rate, volatility, option_type, options_list, threshold):
    high_gamma_options = []
    for option in options_list:
        delta, gamma, theta, vega = calculate_option_greeks_advanced(spot_price, option['strike_price'], time_to_maturity, risk_free_rate, volatility, option_type)
        if gamma > threshold:
            high_gamma_options.append(option)
    return high_gamma_options


import requests

def execute_order(api_key, order_type, option, quantity, stop_loss=None, good_until=None):
    endpoint = "https://api.example.com/orders"
    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + api_key
    }
    payload = {
        'order_type': order_type,
        'option': option,
        'quantity': quantity
    }
    if stop_loss is not None:
        payload['stop_loss'] = stop_loss
    if good_until is not None:
        payload['good_until'] = good_until
    response = requests.post(endpoint, headers=headers, json=payload)
    if response.status_code == 200:
        return True
    else:
        return False


